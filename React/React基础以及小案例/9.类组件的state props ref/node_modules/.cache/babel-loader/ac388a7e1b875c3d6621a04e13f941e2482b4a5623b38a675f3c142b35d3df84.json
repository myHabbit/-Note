{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G1330\\\\Desktop\\\\react\\\\7.state\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  /* \r\n      在react 当组件渲染完毕后 在修改组件中的变量 不会使视图重新渲染\r\n      要使得 组件可以可以收到变量的影响 必须在变量修改后对组件进行重新渲染\r\n      这里我们就需要一个特殊的变量 ，当这个变量被修改时 组件会自动重新渲染\r\n        state相当于一个变量 。\r\n      只是这个变量在react中进行了注册\r\n      react会监控变量的变化，当state发生变化时，会自动触发组件的重新渲染 使得我们的\r\n      的修改可以在页面中呈现出来\r\n        在函数组件中 我们需要钩子函数 获取state\r\n        使用useState()   来创建state\r\n      它需要一个值作为参数 这个值就是state的初始值\r\n        返回的的一个数组  数组中第一个元素 是初始值\r\n           --初始值只用来显示数据 直接修改不会触发组件的重新渲染\r\n         数组中第二个元素是个函数  通常会命名为setxxx\r\n            --这个函数用来修改state，调用其修改state后 会触发组件的重新渲染\r\n            --并且使用函数中的值 做为新的state的值\r\n  */\n\n  const result = useState(1);\n  // const count = result[0]\n  // const setCount = result[1]\n  const [count, setCount] = result;\n\n  /* \r\n   当我们点击+时 数字增大\r\n   点击-时  数字减少\r\n  */\n  //    创建一个变量 存储数字\n  // let count = 1\n\n  const addHandler = () => {\n    // 点击后 数字+1\n    setCount(count + 1); //修改state的值\n  };\n\n  const lessHandler = () => {\n    // 点击后 数字-1\n    setCount(count - 1); //修改state的值\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'app',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHandler,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: lessHandler,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n};\n_s(App, \"4HZs06ub3Fm8iCoigleadESLd4c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","result","count","setCount","addHandler","lessHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/G1330/Desktop/react/7.state/src/App.js"],"sourcesContent":["import './App.css'\r\nimport { useState } from 'react'\r\nconst App = () => {\r\n\r\n\r\n\r\n\r\n\r\n    /* \r\n        在react 当组件渲染完毕后 在修改组件中的变量 不会使视图重新渲染\r\n        要使得 组件可以可以收到变量的影响 必须在变量修改后对组件进行重新渲染\r\n        这里我们就需要一个特殊的变量 ，当这个变量被修改时 组件会自动重新渲染\r\n\r\n        state相当于一个变量 。\r\n        只是这个变量在react中进行了注册\r\n        react会监控变量的变化，当state发生变化时，会自动触发组件的重新渲染 使得我们的\r\n        的修改可以在页面中呈现出来\r\n\r\n        在函数组件中 我们需要钩子函数 获取state\r\n\r\n        使用useState()   来创建state\r\n        它需要一个值作为参数 这个值就是state的初始值\r\n          返回的的一个数组  数组中第一个元素 是初始值\r\n             --初始值只用来显示数据 直接修改不会触发组件的重新渲染\r\n           数组中第二个元素是个函数  通常会命名为setxxx\r\n              --这个函数用来修改state，调用其修改state后 会触发组件的重新渲染\r\n              --并且使用函数中的值 做为新的state的值\r\n    */\r\n\r\n\r\n    const result = useState(1)\r\n    // const count = result[0]\r\n    // const setCount = result[1]\r\n    const [count, setCount] = result\r\n\r\n\r\n    /* \r\n     当我们点击+时 数字增大\r\n     点击-时  数字减少\r\n    */\r\n    //    创建一个变量 存储数字\r\n    // let count = 1\r\n\r\n    const addHandler = () => {\r\n        // 点击后 数字+1\r\n        setCount(count + 1)     //修改state的值\r\n    };\r\n    const lessHandler = () => {\r\n        // 点击后 数字-1\r\n        setCount(count - 1)     //修改state的值\r\n\r\n    }\r\n\r\n\r\n    return <div className={'app'}>\r\n        <h1>{count}</h1>\r\n        <button onClick={addHandler}>+</button>\r\n        <button onClick={lessHandler}>-</button>\r\n    </div>\r\n}\r\n\r\nexport default App"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAChC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAMd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAMI,MAAMC,MAAM,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC1B;EACA;EACA,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGF,MAAM;;EAGhC;AACJ;AACA;AACA;EACI;EACA;;EAEA,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACrB;IACAD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,EAAK;EAC5B,CAAC;;EACD,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACtB;IACAF,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,EAAK;EAE5B,CAAC;;EAGD,oBAAOJ,OAAA;IAAKQ,SAAS,EAAE,KAAM;IAAAC,QAAA,gBACzBT,OAAA;MAAAS,QAAA,EAAKL;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBb,OAAA;MAAQc,OAAO,EAAER,UAAW;MAAAG,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvCb,OAAA;MAAQc,OAAO,EAAEP,WAAY;MAAAE,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AACV,CAAC;AAAAX,EAAA,CAzDKD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AA2DT,eAAeA,GAAG;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}