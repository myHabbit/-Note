{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G1330\\\\Desktop\\\\react\\\\16.\\u8FC7\\u6EE4\\u65E5\\u5FD7\\\\src\\\\Components\\\\Logs\\\\Logs.js\",\n  _s = $RefreshSig$();\n/* \r\n   日志的容器\r\n*/\n\nimport { useState } from 'react';\nimport LogFilter from '../LogFilter/LogFilter';\nimport LogItem from '../Logs/LogItem';\nimport '../Logs/Logs.css';\nimport Card from '../UI/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logs = props => {\n  _s();\n  // 创建一个存储年份的state\n  const [year, setYear] = useState(2022);\n\n  /* \r\n    logsDate用来存储学习日志  \r\n       这个数据除了当前组件logs需要使用外 logsform也需要使用\r\n        当遇到一个数据需要被多个组件使用时 我们可以将数据放在这些组件公共的祖先元素中\r\n        这样可以使得多个组件都能方便的访问到这个数据\r\n            state的提升\r\n  \r\n  */\n\n  //   过滤数据\n  let filterData = props.logsData.filter(item => {\n    return item.date.getFullYear() === 2021;\n  });\n  let logItemData = props.logsData.map((item, index) => /*#__PURE__*/_jsxDEV(LogItem\n  // logIndex={index}\n  // onDelLog={props.onDelLog}\n  , {\n    onDelLog: () => props.onDelLog(index),\n    date: item.date,\n    desc: item.desc,\n    time: item.time\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 59\n  }, this));\n  // logsData.map(item => <LogItem {...item} />)\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"logs\",\n    children: [/*#__PURE__*/_jsxDEV(LogFilter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), logItemData.length !== 0 ? logItemData : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-logs\",\n      children: \"!!\\u6CA1\\u6709\\u6570\\u636E\\u54E6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 54\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 12\n  }, this);\n};\n_s(Logs, \"LZkpQOY7T9KA1aDTEQ6v9snLmmw=\");\n_c = Logs;\nexport default Logs;\nvar _c;\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"names":["useState","LogFilter","LogItem","Card","jsxDEV","_jsxDEV","Logs","props","_s","year","setYear","filterData","logsData","filter","item","date","getFullYear","logItemData","map","index","onDelLog","desc","time","id","fileName","_jsxFileName","lineNumber","columnNumber","className","children","length","_c","$RefreshReg$"],"sources":["C:/Users/G1330/Desktop/react/16.过滤日志/src/Components/Logs/Logs.js"],"sourcesContent":["/* \r\n   日志的容器\r\n*/\r\n\r\nimport { useState } from 'react'\r\nimport LogFilter from '../LogFilter/LogFilter'\r\nimport LogItem from '../Logs/LogItem'\r\nimport '../Logs/Logs.css'\r\nimport Card from '../UI/Card/Card'\r\n\r\nconst Logs = (props) => {\r\n    // 创建一个存储年份的state\r\n    const [year,setYear] = useState(2022)\r\n\r\n    \r\n    /* \r\n      logsDate用来存储学习日志  \r\n         这个数据除了当前组件logs需要使用外 logsform也需要使用\r\n          当遇到一个数据需要被多个组件使用时 我们可以将数据放在这些组件公共的祖先元素中\r\n          这样可以使得多个组件都能方便的访问到这个数据\r\n\r\n\r\n          state的提升\r\n    \r\n    */\r\n\r\n\r\n    //   过滤数据\r\n    let filterData = props.logsData.filter(item => {\r\n        return item.date.getFullYear() === 2021\r\n    })\r\n\r\n\r\n    let logItemData = props.logsData.map((item, index) => <LogItem\r\n        // logIndex={index}\r\n        // onDelLog={props.onDelLog}\r\n        onDelLog={() => props.onDelLog(index)} key={item.id}\r\n        date={item.date} desc={item.desc} time={item.time} />)\r\n    // logsData.map(item => <LogItem {...item} />)\r\n    return <Card className='logs'>\r\n        {/* \r\n           在父组件中可以直接在子组件中设置属性\r\n        \r\n        */}\r\n        {/*引入年份组件 */}\r\n        <LogFilter></LogFilter>\r\n\r\n        {\r\n            logItemData.length !== 0 ? logItemData : <p className='no-logs'>!!没有数据哦</p>\r\n        }\r\n    </Card>\r\n}\r\n\r\nexport default Logs"],"mappings":";;AAAA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAO,kBAAkB;AACzB,OAAOC,IAAI,MAAM,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAGrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAKI;EACA,IAAIW,UAAU,GAAGJ,KAAK,CAACK,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAI;IAC3C,OAAOA,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,IAAI;EAC3C,CAAC,CAAC;EAGF,IAAIC,WAAW,GAAGV,KAAK,CAACK,QAAQ,CAACM,GAAG,CAAC,CAACJ,IAAI,EAAEK,KAAK,kBAAKd,OAAA,CAACH;EACnD;EACA;EAAA;IACAkB,QAAQ,EAAEA,CAAA,KAAMb,KAAK,CAACa,QAAQ,CAACD,KAAK,CAAE;IACtCJ,IAAI,EAAED,IAAI,CAACC,IAAK;IAACM,IAAI,EAAEP,IAAI,CAACO,IAAK;IAACC,IAAI,EAAER,IAAI,CAACQ;EAAK,GADNR,IAAI,CAACS,EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC,CAAC;EAC1D;EACA,oBAAOtB,OAAA,CAACF,IAAI;IAACyB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBAMzBxB,OAAA,CAACJ,SAAS;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EAGnBV,WAAW,CAACa,MAAM,KAAK,CAAC,GAAGb,WAAW,gBAAGZ,OAAA;MAAGuB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7E,CAAC;AACX,CAAC;AAAAnB,EAAA,CAzCKF,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AA2CV,eAAeA,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}